(()=>{"use strict";var n={208:(n,e,t)=>{t.d(e,{A:()=>s});var o=t(354),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([n.id,"html {\n  background-color: gray;\n}\n\n.container {\n  display: flex;\n  justify-content: center;\n  gap: 50px;\n}\n.player-gameboard {\n  display: grid;\n  grid-template-columns: repeat(10, 50px);\n}\n.box {\n  border-top: black solid;\n  border-left: black solid;\n  width: 50px;\n  height: 50px;\n}\n\n.box:nth-child(10n) {\n  border-right: black solid;\n}\n\n.box:nth-child(n + 91) {\n  border-bottom: black solid;\n}\n\n.player.box.ship {\n  background-color: green;\n}\n\n.computer-gameboard {\n  display: grid;\n  grid-template-columns: repeat(10, 50px);\n}\n\n.hit,\n.player.box.ship.hit {\n  background-color: red;\n}\n\n.miss {\n  background-color: blue;\n}\n\n.chatlog-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.chatlog {\n  display: flex;\n  flex-grow: 0;\n  height: 200px;\n  min-width: 200px;\n  margin-top: 50px;\n  border: solid black;\n  overflow: hidden;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,SAAS;AACX;AACA;EACE,aAAa;EACb,uCAAuC;AACzC;AACA;EACE,uBAAuB;EACvB,wBAAwB;EACxB,WAAW;EACX,YAAY;AACd;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,uCAAuC;AACzC;;AAEA;;EAEE,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,aAAa;EACb,YAAY;EACZ,aAAa;EACb,gBAAgB;EAChB,gBAAgB;EAChB,mBAAmB;EACnB,gBAAgB;AAClB",sourcesContent:["html {\n  background-color: gray;\n}\n\n.container {\n  display: flex;\n  justify-content: center;\n  gap: 50px;\n}\n.player-gameboard {\n  display: grid;\n  grid-template-columns: repeat(10, 50px);\n}\n.box {\n  border-top: black solid;\n  border-left: black solid;\n  width: 50px;\n  height: 50px;\n}\n\n.box:nth-child(10n) {\n  border-right: black solid;\n}\n\n.box:nth-child(n + 91) {\n  border-bottom: black solid;\n}\n\n.player.box.ship {\n  background-color: green;\n}\n\n.computer-gameboard {\n  display: grid;\n  grid-template-columns: repeat(10, 50px);\n}\n\n.hit,\n.player.box.ship.hit {\n  background-color: red;\n}\n\n.miss {\n  background-color: blue;\n}\n\n.chatlog-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.chatlog {\n  display: flex;\n  flex-grow: 0;\n  height: 200px;\n  min-width: 200px;\n  margin-top: 50px;\n  border: solid black;\n  overflow: hidden;\n}\n"],sourceRoot:""}]);const s=i},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var a={},i=[],s=0;s<n.length;s++){var c=n[s],l=o.base?c[0]+o.base:c[0],d=a[l]||0,u="".concat(l," ").concat(d);a[l]=d+1;var p=t(u),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(A);else{var h=r(A,o);o.byIndex=s,e.splice(s,0,{identifier:u,updater:h,references:1})}i.push(u)}return i}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=o(n=n||[],r=r||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var s=t(a[i]);e[s].references--}for(var c=o(n,r),l=0;l<a.length;l++){var d=t(a[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},659:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={id:o,exports:{}};return n[o](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0;var o={};(()=>{t.d(o,{PL:()=>z,Ro:()=>N,iV:()=>H,rI:()=>R});let n,e=[];function r(){const n=Math.floor(Math.random()*e.length),t=e[n];e.splice(n,1),H().gameboard.receiveAttack(`${t[0]}-${t[1]}`)}function a(n){if("computer"!=n.name){const e=document.querySelector(".player-gameboard");n.gameboard.grid.forEach(((n,t)=>{n.forEach(((n,o)=>{const r=document.createElement("div");0==n&&r.classList.add("player","box","zero"),0!=n&&r.classList.add("player","box","ship"),r.id=`player-${t}-${o}`,e.append(r)}))}))}else{const t=document.querySelector(".computer-gameboard");n.gameboard.grid.forEach(((n,o)=>{n.forEach(((n,r)=>{const a=document.createElement("div");var i,c;0==n&&a.classList.add("computer","box","zero"),0!=n&&a.classList.add("computer","box","ship"),a.id=`computer-${o}-${r}`,i=o,c=r,e.push([i,c]),a.addEventListener("click",s,{once:!0}),t.append(a)}))}))}}function i(n,e="ship"){const t=z(),o=(new Date).toLocaleTimeString(),r=document.querySelector(".chat-log-message");r.innerText=`${o}: ${t.name} ${n} enemy ${e}!\n`+r.innerText}function s(n){const e=n.target.id.substring(n.target.id.indexOf("-")+1);N().gameboard.receiveAttack(e)}class c{constructor(n,e){this.name=n,this.grid=e}getGrid(){return this.grid}setGrid(n,e){n.forEach((n=>{const t=n[0],o=n[1];this.grid[t][o]=e}))}receiveAttack(n){const[e,t]=n.split("-");if(0!=this.grid[e][t]){document.getElementById(`${this.name}-${n}`).classList.add("hit"),i("hit",this.grid[e][t]);const o=N().ships.findIndex((n=>n.name===this.grid[e][t]));N().ships[o].removeHitLocation([+e,+t]),"computer"==z().name&&r()}else document.getElementById(`${this.name}-${n}`).classList.add("miss"),i("missed"),R(),"computer"==z().name&&r()}}function l(e){return n=Array.from(Array(10),(()=>new Array(10).fill(0))),new c(e,n)}const d=10;class u{constructor(n,e,t,o){this.name=n,this.length=e,this.hits=t,this.location=o}getLocation(){return this.location}removeHitLocation(n){const e=this.getLocation();let t;for(let o=0;o<e.length;o++)e[o][0]==n[0]&&e[o][1]==n[1]&&(t=o);e.splice(t,1),this.hit(),this.isSunk()}hit(){this.hits+=1}setTotalShips(){this.totalShips-=1}isSunk(){this.hits==this.length&&(N().totalShips-=1,0==N().totalShips&&(console.log(`${z().name} won the game!`),"computer"==z().name&&R(),function(){const n=document.querySelector(".computer-gameboard");for(const e of n.children)e.removeEventListener("click",s)}()))}}function p(n){let e=[];return e.push(A("Carrier",5,n)),e.push(A("Battleship",4,n)),e.push(A("Destroyer",3,n)),e.push(A("Submarine",3,n)),e.push(A("Patrol Boat",2,n)),e}function A(n,e,t){const o=function(n,e,t){const o=[],r={0:[1,0],1:[0,1],2:[-1,0],3:[0,-1]};let a=t.getGrid();for(;;){let i=Math.floor(Math.random()*d),s=Math.floor(Math.random()*d),c=Math.floor(4*Math.random());if(0==a[i][s]){o.push([i,s]);for(let n=1;n<=e-1;n++)if(i+=r[c][0],s+=r[c][1],o.push([i,s]),i<0||s<0||i>9||s>9||0!=a[i][s]){o.length=0;break}if(0!=o.length)return t.setGrid(o,n),o}}}(n,e,t);return new u(n,e,0,o)}class h{constructor(n,e,t,o){this.name=n,this.gameboard=e,this.ships=t,this.totalShips=o}}function m(n,e,t){return new h(n,e,t,5)}var f=t(72),g=t.n(f),b=t(825),y=t.n(b),v=t(659),E=t.n(v),x=t(56),C=t.n(x),B=t(540),k=t.n(B),w=t(113),S=t.n(w),L=t(208),M={};M.styleTagTransform=S(),M.setAttributes=C(),M.insert=E().bind(null,"head"),M.domAPI=y(),M.insertStyleElement=k(),g()(L.A,M),L.A&&L.A.locals&&L.A.locals;let $=0,T=[];const j=l("player");console.log(j);const I=l("computer"),q=p(j),G=p(I);console.table(j.getGrid()),console.log(q),console.table(I.getGrid()),console.log(G);const O=m("player",j,q),P=m("computer",I,G);function R(){$=0==$?1:0}function z(){return T[$]}function N(){return 0==$?T[1]:T[0]}function H(){return T[0]}a(O),a(P),T=[O,P],console.log(T)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,