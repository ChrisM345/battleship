(()=>{"use strict";let o;function t(){return o}function n(t){console.log("do something!"),t.forEach((t=>{console.log(t);const n=t[0],s=t[1];o[n][s]=1}))}const s=[];class e{constructor(o,t,n,s){this.name=o,this.length=t,this.hits=n,this.location=s}}function l(o,l){const r=function(o){const s=[],e={0:[1,0],1:[0,1],2:[-1,0],3:[0,-1]};let l=t();for(;;){let t=Math.floor(10*Math.random()),r=Math.floor(10*Math.random()),i=Math.floor(4*Math.random());if(console.log(l[t][r]),console.log(`x is ${t}, y is ${r}, direction is ${i}, length is ${o}`),0==l[t][r]){s.push([t,r]);for(let n=1;n<=o-1;n++)if(t+=e[i][0],r+=e[i][1],s.push([t,r]),console.log(`x is ${t}, y is ${r}`),t<0||r<0||t>9||r>9||0!=l[t][r]){console.log("broke"),s.length=0;break}if(0!=s.length)return n(s),console.log("yes!"),s}}}(l),i=new e(o,l,0,r);return s.push(i),i}o=Array.from(Array(10),(()=>new Array(10).fill(0))),console.log("create ships"),l("Carrier",5),l("Battleship",4),l("Destroyer",3),l("Submarine",3),l("Patrol Boat",2),console.log(s),console.table(t())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoibUJBQUEsSUFBSUEsRUFRSixTQUFTQyxJQUNQLE9BQU9ELENBQ1QsQ0FFQSxTQUFTRSxFQUFRQyxHQUNmQyxRQUFRQyxJQUFJLGlCQUNaRixFQUFZRyxTQUFTQyxJQUNuQkgsUUFBUUMsSUFBSUUsR0FDWixNQUFNQyxFQUFJRCxFQUFRLEdBQ1pFLEVBQUlGLEVBQVEsR0FDbEJQLEVBQUtRLEdBQUdDLEdBQUssQ0FBQyxHQUVsQixDQ2xCQSxNQUFNQyxFQUFXLEdBR2pCLE1BQU1DLEVBQ0osV0FBQUMsQ0FBWUMsRUFBTUMsRUFBUUMsRUFBTUMsR0FDOUJDLEtBQUtKLEtBQU9BLEVBQ1pJLEtBQUtILE9BQVNBLEVBQ2RHLEtBQUtGLEtBQU9BLEVBQ1pFLEtBQUtELFNBQVdBLENBQ2xCLEVBNkNGLFNBQVNFLEVBQVlMLEVBQU1DLEdBQ3pCLE1BQU1FLEVBbENSLFNBQW1CRixHQUNqQixNQUFNRSxFQUFXLEdBRVhHLEVBQWEsQ0FBRSxFQUFHLENBQUMsRUFBRyxHQUFJLEVBQUcsQ0FBQyxFQUFHLEdBQUksRUFBRyxFQUFFLEVBQUcsR0FBSSxFQUFHLENBQUMsR0FBSSxJQUMvRCxJQUFJbkIsRUFBT0MsSUFDWCxPQUFhLENBQ1gsSUFBSU8sRUFBSVksS0FBS0MsTUExQkgsR0EwQlNELEtBQUtFLFVBQ3BCYixFQUFJVyxLQUFLQyxNQTNCSCxHQTJCU0QsS0FBS0UsVUFDcEJDLEVBQVlILEtBQUtDLE1BQXNCLEVBQWhCRCxLQUFLRSxVQUdoQyxHQUZBbEIsUUFBUUMsSUFBSUwsRUFBS1EsR0FBR0MsSUFDcEJMLFFBQVFDLElBQUksUUFBUUcsV0FBV0MsbUJBQW1CYyxnQkFBd0JULEtBQ3hELEdBQWRkLEVBQUtRLEdBQUdDLEdBQVMsQ0FDbkJPLEVBQVNRLEtBQUssQ0FBQ2hCLEVBQUdDLElBQ2xCLElBQUssSUFBSWdCLEVBQUksRUFBR0EsR0FBS1gsRUFBUyxFQUFHVyxJQUsvQixHQUpBakIsR0FBS1csRUFBV0ksR0FBVyxHQUMzQmQsR0FBS1UsRUFBV0ksR0FBVyxHQUMzQlAsRUFBU1EsS0FBSyxDQUFDaEIsRUFBR0MsSUFDbEJMLFFBQVFDLElBQUksUUFBUUcsV0FBV0MsS0FDM0JELEVBQUksR0FBS0MsRUFBSSxHQUFLRCxFQUFJLEdBQUtDLEVBQUksR0FBbUIsR0FBZFQsRUFBS1EsR0FBR0MsR0FBUyxDQUN2REwsUUFBUUMsSUFBSSxTQUNaVyxFQUFTRixPQUFTLEVBQ2xCLEtBQ0YsQ0FFRixHQUF1QixHQUFuQkUsRUFBU0YsT0FHWCxPQUZBWixFQUFRYyxHQUNSWixRQUFRQyxJQUFJLFFBQ0xXLENBRVgsQ0FDRixDQUNGLENBR21CVSxDQUFVWixHQUNyQmEsRUFBTyxJQUFJaEIsRUFBS0UsRUFBTUMsRUFBUSxFQUFHRSxHQUV2QyxPQURBTixFQUFTYyxLQUFLRyxHQUNQQSxDQUNULENEekRFM0IsRUFBTzRCLE1BQU1DLEtBQUtELE1BREosS0FDa0IsSUFBTSxJQUFJQSxNQUQ1QixJQUN5Q0UsS0FBSyxLQ1c1RDFCLFFBQVFDLElBQUksZ0JBQ1phLEVBQVksVUFBVyxHQUN2QkEsRUFBWSxhQUFjLEdBQzFCQSxFQUFZLFlBQWEsR0FDekJBLEVBQVksWUFBYSxHQUN6QkEsRUFBWSxjQUFlLEdDZjdCZCxRQUFRQyxJRDJEQ0ssR0MxRFROLFFBQVEyQixNQUFNOUIsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvZ2FtZWJvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2hpcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBncmlkO1xuXG5mdW5jdGlvbiBjcmVhdGVHYW1lQm9hcmQoKSB7XG4gIGNvbnN0IHdpZHRoID0gMTA7XG4gIGdyaWQgPSBBcnJheS5mcm9tKEFycmF5KHdpZHRoKSwgKCkgPT4gbmV3IEFycmF5KHdpZHRoKS5maWxsKDApKTtcbiAgcmV0dXJuIGdyaWQ7XG59XG5cbmZ1bmN0aW9uIGdldEdyaWQoKSB7XG4gIHJldHVybiBncmlkO1xufVxuXG5mdW5jdGlvbiBzZXRHcmlkKGNvb3JkaW5hdGVzKSB7XG4gIGNvbnNvbGUubG9nKFwiZG8gc29tZXRoaW5nIVwiKTtcbiAgY29vcmRpbmF0ZXMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGVsZW1lbnQpO1xuICAgIGNvbnN0IHggPSBlbGVtZW50WzBdO1xuICAgIGNvbnN0IHkgPSBlbGVtZW50WzFdO1xuICAgIGdyaWRbeF1beV0gPSAxO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlR2FtZUJvYXJkLCBnZXRHcmlkLCBzZXRHcmlkIH07XG4iLCJpbXBvcnQgeyBnZXRHcmlkLCBzZXRHcmlkIH0gZnJvbSBcIi4vZ2FtZWJvYXJkXCI7XG5cbmNvbnN0IGFsbFNoaXBzID0gW107XG5jb25zdCB3aWR0aCA9IDEwO1xuXG5jbGFzcyBTaGlwIHtcbiAgY29uc3RydWN0b3IobmFtZSwgbGVuZ3RoLCBoaXRzLCBsb2NhdGlvbikge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgdGhpcy5oaXRzID0gaGl0cztcbiAgICB0aGlzLmxvY2F0aW9uID0gbG9jYXRpb247XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVNoaXBzKCkge1xuICBjb25zb2xlLmxvZyhcImNyZWF0ZSBzaGlwc1wiKTtcbiAgY3JlYXRlU2hpcHMoXCJDYXJyaWVyXCIsIDUpO1xuICBjcmVhdGVTaGlwcyhcIkJhdHRsZXNoaXBcIiwgNCk7XG4gIGNyZWF0ZVNoaXBzKFwiRGVzdHJveWVyXCIsIDMpO1xuICBjcmVhdGVTaGlwcyhcIlN1Ym1hcmluZVwiLCAzKTtcbiAgY3JlYXRlU2hpcHMoXCJQYXRyb2wgQm9hdFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gcGxhY2VTaGlwKGxlbmd0aCkge1xuICBjb25zdCBsb2NhdGlvbiA9IFtdO1xuICAvL0RpcmVjdGlvbnMgLSAwIGlzIFJpZ2h0LCAxIGlzIERvd24sIDIgaXMgTGVmdCwgMyBpcyBVcFxuICBjb25zdCBkaXJlY3Rpb25zID0geyAwOiBbMSwgMF0sIDE6IFswLCAxXSwgMjogWy0xLCAwXSwgMzogWzAsIC0xXSB9O1xuICBsZXQgZ3JpZCA9IGdldEdyaWQoKTtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBsZXQgeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHdpZHRoKTtcbiAgICBsZXQgeSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHdpZHRoKTtcbiAgICBsZXQgZGlyZWN0aW9uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNCk7XG4gICAgY29uc29sZS5sb2coZ3JpZFt4XVt5XSk7XG4gICAgY29uc29sZS5sb2coYHggaXMgJHt4fSwgeSBpcyAke3l9LCBkaXJlY3Rpb24gaXMgJHtkaXJlY3Rpb259LCBsZW5ndGggaXMgJHtsZW5ndGh9YCk7XG4gICAgaWYgKGdyaWRbeF1beV0gPT0gMCkge1xuICAgICAgbG9jYXRpb24ucHVzaChbeCwgeV0pO1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gbGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIHggKz0gZGlyZWN0aW9uc1tkaXJlY3Rpb25dWzBdO1xuICAgICAgICB5ICs9IGRpcmVjdGlvbnNbZGlyZWN0aW9uXVsxXTtcbiAgICAgICAgbG9jYXRpb24ucHVzaChbeCwgeV0pO1xuICAgICAgICBjb25zb2xlLmxvZyhgeCBpcyAke3h9LCB5IGlzICR7eX1gKTtcbiAgICAgICAgaWYgKHggPCAwIHx8IHkgPCAwIHx8IHggPiA5IHx8IHkgPiA5IHx8IGdyaWRbeF1beV0gIT0gMCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiYnJva2VcIik7XG4gICAgICAgICAgbG9jYXRpb24ubGVuZ3RoID0gMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvY2F0aW9uLmxlbmd0aCAhPSAwKSB7XG4gICAgICAgIHNldEdyaWQobG9jYXRpb24pO1xuICAgICAgICBjb25zb2xlLmxvZyhcInllcyFcIik7XG4gICAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU2hpcHMobmFtZSwgbGVuZ3RoKSB7XG4gIGNvbnN0IGxvY2F0aW9uID0gcGxhY2VTaGlwKGxlbmd0aCk7XG4gIGNvbnN0IHNoaXAgPSBuZXcgU2hpcChuYW1lLCBsZW5ndGgsIDAsIGxvY2F0aW9uKTtcbiAgYWxsU2hpcHMucHVzaChzaGlwKTtcbiAgcmV0dXJuIHNoaXA7XG59XG5cbmZ1bmN0aW9uIGdldFNoaXBzKCkge1xuICByZXR1cm4gYWxsU2hpcHM7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZVNoaXBzLCBpbml0aWFsaXplU2hpcHMsIGdldFNoaXBzIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVHYW1lQm9hcmQsIGdldEdyaWQgfSBmcm9tIFwiLi9nYW1lYm9hcmRcIjtcbmltcG9ydCB7IGluaXRpYWxpemVTaGlwcywgZ2V0U2hpcHMgfSBmcm9tIFwiLi9zaGlwXCI7XG5cbmNyZWF0ZUdhbWVCb2FyZCgpO1xuaW5pdGlhbGl6ZVNoaXBzKCk7XG5jb25zb2xlLmxvZyhnZXRTaGlwcygpKTtcbmNvbnNvbGUudGFibGUoZ2V0R3JpZCgpKTtcbiJdLCJuYW1lcyI6WyJncmlkIiwiZ2V0R3JpZCIsInNldEdyaWQiLCJjb29yZGluYXRlcyIsImNvbnNvbGUiLCJsb2ciLCJmb3JFYWNoIiwiZWxlbWVudCIsIngiLCJ5IiwiYWxsU2hpcHMiLCJTaGlwIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibGVuZ3RoIiwiaGl0cyIsImxvY2F0aW9uIiwidGhpcyIsImNyZWF0ZVNoaXBzIiwiZGlyZWN0aW9ucyIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImRpcmVjdGlvbiIsInB1c2giLCJpIiwicGxhY2VTaGlwIiwic2hpcCIsIkFycmF5IiwiZnJvbSIsImZpbGwiLCJ0YWJsZSJdLCJzb3VyY2VSb290IjoiIn0=